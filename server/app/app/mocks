// Code generated by MockGen. DO NOT EDIT.
// Source: prune.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	app "github.com/ericzzh/mattermost-plugin-prune/server/app"
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v6/model"
)

// MockPruneService is a mock of PruneService interface.
type MockPruneService struct {
	ctrl     *gomock.Controller
	recorder *MockPruneServiceMockRecorder
}

// MockPruneServiceMockRecorder is the mock recorder for MockPruneService.
type MockPruneServiceMockRecorder struct {
	mock *MockPruneService
}

// NewMockPruneService creates a new mock instance.
func NewMockPruneService(ctrl *gomock.Controller) *MockPruneService {
	mock := &MockPruneService{ctrl: ctrl}
	mock.recorder = &MockPruneServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPruneService) EXPECT() *MockPruneServiceMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockPruneService) Start() (*app.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(*app.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockPruneServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPruneService)(nil).Start))
}

// MockPruneStore is a mock of PruneStore interface.
type MockPruneStore struct {
	ctrl     *gomock.Controller
	recorder *MockPruneStoreMockRecorder
}

// MockPruneStoreMockRecorder is the mock recorder for MockPruneStore.
type MockPruneStoreMockRecorder struct {
	mock *MockPruneStore
}

// NewMockPruneStore creates a new mock instance.
func NewMockPruneStore(ctrl *gomock.Controller) *MockPruneStore {
	mock := &MockPruneStore{ctrl: ctrl}
	mock.recorder = &MockPruneStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPruneStore) EXPECT() *MockPruneStoreMockRecorder {
	return m.recorder
}

// CutDeletedRoots mocks base method.
func (m *MockPruneStore) CutDeletedRoots(chid string, opt app.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CutDeletedRoots", chid, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CutDeletedRoots indicates an expected call of CutDeletedRoots.
func (mr *MockPruneStoreMockRecorder) CutDeletedRoots(chid, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CutDeletedRoots", reflect.TypeOf((*MockPruneStore)(nil).CutDeletedRoots), chid, opt)
}

// CutRoots mocks base method.
func (m *MockPruneStore) CutRoots(chid string, opt app.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CutRoots", chid, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CutRoots indicates an expected call of CutRoots.
func (mr *MockPruneStoreMockRecorder) CutRoots(chid, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CutRoots", reflect.TypeOf((*MockPruneStore)(nil).CutRoots), chid, opt)
}

// CutThreads mocks base method.
func (m *MockPruneStore) CutThreads(chid string, opt app.Options) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CutThreads", chid, opt)
	ret0, _ := ret[0].(error)
	return ret0
}

// CutThreads indicates an expected call of CutThreads.
func (mr *MockPruneStoreMockRecorder) CutThreads(chid, opt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CutThreads", reflect.TypeOf((*MockPruneStore)(nil).CutThreads), chid, opt)
}

// GetAllChannelsForTeam mocks base method.
func (m *MockPruneStore) GetAllChannelsForTeam(teamID string) ([]*model.Channel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllChannelsForTeam", teamID)
	ret0, _ := ret[0].([]*model.Channel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllChannelsForTeam indicates an expected call of GetAllChannelsForTeam.
func (mr *MockPruneStoreMockRecorder) GetAllChannelsForTeam(teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllChannelsForTeam", reflect.TypeOf((*MockPruneStore)(nil).GetAllChannelsForTeam), teamID)
}

// GetFilesMap mocks base method.
func (m *MockPruneStore) GetFilesMap() (app.FilesMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilesMap")
	ret0, _ := ret[0].(app.FilesMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilesMap indicates an expected call of GetFilesMap.
func (mr *MockPruneStoreMockRecorder) GetFilesMap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilesMap", reflect.TypeOf((*MockPruneStore)(nil).GetFilesMap))
}

// SweepFileInfos mocks base method.
func (m *MockPruneStore) SweepFileInfos(chid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SweepFileInfos", chid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SweepFileInfos indicates an expected call of SweepFileInfos.
func (mr *MockPruneStoreMockRecorder) SweepFileInfos(chid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SweepFileInfos", reflect.TypeOf((*MockPruneStore)(nil).SweepFileInfos), chid)
}

// SweepFiles mocks base method.
func (m *MockPruneStore) SweepFiles(chid string, fm app.FilesMap) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SweepFiles", chid, fm)
	ret0, _ := ret[0].(error)
	return ret0
}

// SweepFiles indicates an expected call of SweepFiles.
func (mr *MockPruneStoreMockRecorder) SweepFiles(chid, fm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SweepFiles", reflect.TypeOf((*MockPruneStore)(nil).SweepFiles), chid, fm)
}

// SweepPreferences mocks base method.
func (m *MockPruneStore) SweepPreferences(chid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SweepPreferences", chid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SweepPreferences indicates an expected call of SweepPreferences.
func (mr *MockPruneStoreMockRecorder) SweepPreferences(chid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SweepPreferences", reflect.TypeOf((*MockPruneStore)(nil).SweepPreferences), chid)
}

// SweepReactions mocks base method.
func (m *MockPruneStore) SweepReactions(chid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SweepReactions", chid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SweepReactions indicates an expected call of SweepReactions.
func (mr *MockPruneStoreMockRecorder) SweepReactions(chid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SweepReactions", reflect.TypeOf((*MockPruneStore)(nil).SweepReactions), chid)
}

// SweepThreads mocks base method.
func (m *MockPruneStore) SweepThreads(chid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SweepThreads", chid)
	ret0, _ := ret[0].(error)
	return ret0
}

// SweepThreads indicates an expected call of SweepThreads.
func (mr *MockPruneStoreMockRecorder) SweepThreads(chid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SweepThreads", reflect.TypeOf((*MockPruneStore)(nil).SweepThreads), chid)
}
