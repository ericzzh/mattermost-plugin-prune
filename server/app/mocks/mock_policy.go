// Code generated by MockGen. DO NOT EDIT.
// Source: policy.go

// Package mock_app is a generated GoMock package.
package mock_app

import (
	reflect "reflect"

	app "github.com/ericzzh/mattermost-plugin-prune/server/app"
	gomock "github.com/golang/mock/gomock"
)

// MockPolicyService is a mock of PolicyService interface.
type MockPolicyService struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyServiceMockRecorder
}

// MockPolicyServiceMockRecorder is the mock recorder for MockPolicyService.
type MockPolicyServiceMockRecorder struct {
	mock *MockPolicyService
}

// NewMockPolicyService creates a new mock instance.
func NewMockPolicyService(ctrl *gomock.Controller) *MockPolicyService {
	mock := &MockPolicyService{ctrl: ctrl}
	mock.recorder = &MockPolicyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyService) EXPECT() *MockPolicyServiceMockRecorder {
	return m.recorder
}

// ExpandPolicyAndNormalize mocks base method.
func (m *MockPolicyService) ExpandPolicyAndNormalize() (*app.ExpanedPolicyWithId, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandPolicyAndNormalize")
	ret0, _ := ret[0].(*app.ExpanedPolicyWithId)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExpandPolicyAndNormalize indicates an expected call of ExpandPolicyAndNormalize.
func (mr *MockPolicyServiceMockRecorder) ExpandPolicyAndNormalize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandPolicyAndNormalize", reflect.TypeOf((*MockPolicyService)(nil).ExpandPolicyAndNormalize))
}

// GetPolicy mocks base method.
func (m *MockPolicyService) GetPolicy() app.Policy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy")
	ret0, _ := ret[0].(app.Policy)
	return ret0
}

// GetPolicy indicates an expected call of GetPolicy.
func (mr *MockPolicyServiceMockRecorder) GetPolicy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockPolicyService)(nil).GetPolicy))
}

// LoadFromConfig mocks base method.
func (m *MockPolicyService) LoadFromConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFromConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFromConfig indicates an expected call of LoadFromConfig.
func (mr *MockPolicyServiceMockRecorder) LoadFromConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromConfig", reflect.TypeOf((*MockPolicyService)(nil).LoadFromConfig))
}

// LoadFromYaml mocks base method.
func (m *MockPolicyService) LoadFromYaml(yamlStr string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadFromYaml", yamlStr)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadFromYaml indicates an expected call of LoadFromYaml.
func (mr *MockPolicyServiceMockRecorder) LoadFromYaml(yamlStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadFromYaml", reflect.TypeOf((*MockPolicyService)(nil).LoadFromYaml), yamlStr)
}
