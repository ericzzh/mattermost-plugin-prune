// Code generated by MockGen. DO NOT EDIT.
// Source: bot.go

// Package mock_bot is a generated GoMock package.
package mock_bot

import (
	reflect "reflect"

	bot "github.com/ericzzh/mattermost-plugin-prune/server/bot"
	gomock "github.com/golang/mock/gomock"
	model "github.com/mattermost/mattermost-server/v6/model"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// Infof mocks base method.
func (m *MockLogger) Infof(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
}

// Timed mocks base method.
func (m *MockLogger) Timed() bot.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timed")
	ret0, _ := ret[0].(bot.Logger)
	return ret0
}

// Timed indicates an expected call of Timed.
func (mr *MockLoggerMockRecorder) Timed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timed", reflect.TypeOf((*MockLogger)(nil).Timed))
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// With mocks base method.
func (m *MockLogger) With(arg0 bot.LogContext) bot.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", arg0)
	ret0, _ := ret[0].(bot.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), arg0)
}

// MockPoster is a mock of Poster interface.
type MockPoster struct {
	ctrl     *gomock.Controller
	recorder *MockPosterMockRecorder
}

// MockPosterMockRecorder is the mock recorder for MockPoster.
type MockPosterMockRecorder struct {
	mock *MockPoster
}

// NewMockPoster creates a new mock instance.
func NewMockPoster(ctrl *gomock.Controller) *MockPoster {
	mock := &MockPoster{ctrl: ctrl}
	mock.recorder = &MockPosterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoster) EXPECT() *MockPosterMockRecorder {
	return m.recorder
}

// DM mocks base method.
func (m *MockPoster) DM(userID string, post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DM", userID, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// DM indicates an expected call of DM.
func (mr *MockPosterMockRecorder) DM(userID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DM", reflect.TypeOf((*MockPoster)(nil).DM), userID, post)
}

// EphemeralPost mocks base method.
func (m *MockPoster) EphemeralPost(userID, channelID string, post *model.Post) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EphemeralPost", userID, channelID, post)
}

// EphemeralPost indicates an expected call of EphemeralPost.
func (mr *MockPosterMockRecorder) EphemeralPost(userID, channelID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EphemeralPost", reflect.TypeOf((*MockPoster)(nil).EphemeralPost), userID, channelID, post)
}

// EphemeralPostWithAttachments mocks base method.
func (m *MockPoster) EphemeralPostWithAttachments(userID, channelID, rootPostID string, attachments []*model.SlackAttachment, format string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{userID, channelID, rootPostID, attachments, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "EphemeralPostWithAttachments", varargs...)
}

// EphemeralPostWithAttachments indicates an expected call of EphemeralPostWithAttachments.
func (mr *MockPosterMockRecorder) EphemeralPostWithAttachments(userID, channelID, rootPostID, attachments, format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{userID, channelID, rootPostID, attachments, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EphemeralPostWithAttachments", reflect.TypeOf((*MockPoster)(nil).EphemeralPostWithAttachments), varargs...)
}

// NotifyAdmins mocks base method.
func (m *MockPoster) NotifyAdmins(message, authorUserID string, isTeamEdition bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NotifyAdmins", message, authorUserID, isTeamEdition)
	ret0, _ := ret[0].(error)
	return ret0
}

// NotifyAdmins indicates an expected call of NotifyAdmins.
func (mr *MockPosterMockRecorder) NotifyAdmins(message, authorUserID, isTeamEdition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAdmins", reflect.TypeOf((*MockPoster)(nil).NotifyAdmins), message, authorUserID, isTeamEdition)
}

// Post mocks base method.
func (m *MockPoster) Post(post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", post)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockPosterMockRecorder) Post(post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockPoster)(nil).Post), post)
}

// PostCustomMessageWithAttachments mocks base method.
func (m *MockPoster) PostCustomMessageWithAttachments(channelID, customType string, attachments []*model.SlackAttachment, format string, args ...interface{}) (*model.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelID, customType, attachments, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostCustomMessageWithAttachments", varargs...)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostCustomMessageWithAttachments indicates an expected call of PostCustomMessageWithAttachments.
func (mr *MockPosterMockRecorder) PostCustomMessageWithAttachments(channelID, customType, attachments, format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelID, customType, attachments, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostCustomMessageWithAttachments", reflect.TypeOf((*MockPoster)(nil).PostCustomMessageWithAttachments), varargs...)
}

// PostMessage mocks base method.
func (m *MockPoster) PostMessage(channelID, format string, args ...interface{}) (*model.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelID, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessage", varargs...)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMessage indicates an expected call of PostMessage.
func (mr *MockPosterMockRecorder) PostMessage(channelID, format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelID, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessage", reflect.TypeOf((*MockPoster)(nil).PostMessage), varargs...)
}

// PostMessageToThread mocks base method.
func (m *MockPoster) PostMessageToThread(rootPostID string, post *model.Post) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostMessageToThread", rootPostID, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// PostMessageToThread indicates an expected call of PostMessageToThread.
func (mr *MockPosterMockRecorder) PostMessageToThread(rootPostID, post interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessageToThread", reflect.TypeOf((*MockPoster)(nil).PostMessageToThread), rootPostID, post)
}

// PostMessageWithAttachments mocks base method.
func (m *MockPoster) PostMessageWithAttachments(channelID string, attachments []*model.SlackAttachment, format string, args ...interface{}) (*model.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{channelID, attachments, format}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "PostMessageWithAttachments", varargs...)
	ret0, _ := ret[0].(*model.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostMessageWithAttachments indicates an expected call of PostMessageWithAttachments.
func (mr *MockPosterMockRecorder) PostMessageWithAttachments(channelID, attachments, format interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{channelID, attachments, format}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostMessageWithAttachments", reflect.TypeOf((*MockPoster)(nil).PostMessageWithAttachments), varargs...)
}

// PromptForFeedback mocks base method.
func (m *MockPoster) PromptForFeedback(userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptForFeedback", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromptForFeedback indicates an expected call of PromptForFeedback.
func (mr *MockPosterMockRecorder) PromptForFeedback(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptForFeedback", reflect.TypeOf((*MockPoster)(nil).PromptForFeedback), userID)
}

// PublishWebsocketEventToChannel mocks base method.
func (m *MockPoster) PublishWebsocketEventToChannel(event string, payload interface{}, channelID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebsocketEventToChannel", event, payload, channelID)
}

// PublishWebsocketEventToChannel indicates an expected call of PublishWebsocketEventToChannel.
func (mr *MockPosterMockRecorder) PublishWebsocketEventToChannel(event, payload, channelID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebsocketEventToChannel", reflect.TypeOf((*MockPoster)(nil).PublishWebsocketEventToChannel), event, payload, channelID)
}

// PublishWebsocketEventToTeam mocks base method.
func (m *MockPoster) PublishWebsocketEventToTeam(event string, payload interface{}, teamID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebsocketEventToTeam", event, payload, teamID)
}

// PublishWebsocketEventToTeam indicates an expected call of PublishWebsocketEventToTeam.
func (mr *MockPosterMockRecorder) PublishWebsocketEventToTeam(event, payload, teamID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebsocketEventToTeam", reflect.TypeOf((*MockPoster)(nil).PublishWebsocketEventToTeam), event, payload, teamID)
}

// PublishWebsocketEventToUser mocks base method.
func (m *MockPoster) PublishWebsocketEventToUser(event string, payload interface{}, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishWebsocketEventToUser", event, payload, userID)
}

// PublishWebsocketEventToUser indicates an expected call of PublishWebsocketEventToUser.
func (mr *MockPosterMockRecorder) PublishWebsocketEventToUser(event, payload, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishWebsocketEventToUser", reflect.TypeOf((*MockPoster)(nil).PublishWebsocketEventToUser), event, payload, userID)
}

// MockTelemetry is a mock of Telemetry interface.
type MockTelemetry struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryMockRecorder
}

// MockTelemetryMockRecorder is the mock recorder for MockTelemetry.
type MockTelemetryMockRecorder struct {
	mock *MockTelemetry
}

// NewMockTelemetry creates a new mock instance.
func NewMockTelemetry(ctrl *gomock.Controller) *MockTelemetry {
	mock := &MockTelemetry{ctrl: ctrl}
	mock.recorder = &MockTelemetryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetry) EXPECT() *MockTelemetryMockRecorder {
	return m.recorder
}

// NotifyAdmins mocks base method.
func (m *MockTelemetry) NotifyAdmins(userID, action string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotifyAdmins", userID, action)
}

// NotifyAdmins indicates an expected call of NotifyAdmins.
func (mr *MockTelemetryMockRecorder) NotifyAdmins(userID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotifyAdmins", reflect.TypeOf((*MockTelemetry)(nil).NotifyAdmins), userID, action)
}

// StartTrial mocks base method.
func (m *MockTelemetry) StartTrial(userID, action string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartTrial", userID, action)
}

// StartTrial indicates an expected call of StartTrial.
func (mr *MockTelemetryMockRecorder) StartTrial(userID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTrial", reflect.TypeOf((*MockTelemetry)(nil).StartTrial), userID, action)
}
